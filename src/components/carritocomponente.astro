---
export interface Props {
  productos?: Array<{
    id: string;
    name: string;
    price: number;
    image: string;
    quantity: number;
    category: string;
  }>;
}

const { productos = [] } = Astro.props;
const total = productos.reduce((sum, producto) => sum + producto.price * producto.quantity, 0);
const formatPrice = (price: number) => price.toFixed(2);
---

<div class="carrito-container">
  {
    productos.length === 0 ? (
      <div class="empty-cart text-center py-16">
        <i class="fas fa-shopping-cart text-6xl text-primary-200 mb-4" />
        <h2 class="text-2xl font-semibold text-gray-700 mb-2">Tu carrito está vacío</h2>
        <p class="text-gray-500 mb-6">Parece que aún no has agregado productos a tu carrito</p>
        <a href="/productos" class="btn-primary inline-flex items-center">
          <i class="fas fa-shopping-bag mr-2" /> Ir a comprar
        </a>
      </div>
    ) : (
      <div class="cart-content">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr class="bg-gray-50 text-left">
                <th class="py-3 px-4 font-medium">Producto</th>
                <th class="py-3 px-4 font-medium">Precio</th>
                <th class="py-3 px-4 font-medium">Cantidad</th>
                <th class="py-3 px-4 font-medium">Subtotal</th>
                <th class="py-3 px-4 font-medium">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {productos.map((producto) => (
                <tr
                  class="border-b border-gray-100 hover:bg-gray-50 transition-colors"
                  data-product-id={producto.id}
                >
                  <td class="py-4 px-4">
                    <div class="flex items-center">
                      <img
                        src={producto.image}
                        alt={producto.name}
                        class="w-16 h-16 object-contain rounded bg-gray-100 p-1 mr-4"
                      />
                      <div>
                        <h3 class="font-medium text-gray-800">{producto.name}</h3>
                        <p class="text-sm text-gray-500">Categoría: {producto.category}</p>
                      </div>
                    </div>
                  </td>
                  <td class="py-4 px-4">${formatPrice(producto.price)}</td>
                  <td class="py-4 px-4">
                    <div class="flex items-center quantity-selector">
                      <button
                        class="decrease-quantity bg-gray-100 hover:bg-gray-200 text-gray-700 w-8 h-8 rounded-l flex items-center justify-center transition-colors"
                        data-product-id={producto.id}
                      >
                        <i class="fas fa-minus text-xs" />
                      </button>
                      <input
                        type="number"
                        value={producto.quantity}
                        min="1"
                        class="quantity-input w-12 h-8 text-center border-y border-gray-200 focus:outline-none focus:border-primary-300"
                        data-product-id={producto.id}
                        data-price={producto.price}
                      />
                      <button
                        class="increase-quantity bg-gray-100 hover:bg-gray-200 text-gray-700 w-8 h-8 rounded-r flex items-center justify-center transition-colors"
                        data-product-id={producto.id}
                      >
                        <i class="fas fa-plus text-xs" />
                      </button>
                    </div>
                  </td>
                  <td class="py-4 px-4 font-medium">
                    $<span class="subtotal">{formatPrice(producto.price * producto.quantity)}</span>
                  </td>
                  <td class="py-4 px-4">
                    <button
                      class="remove-item text-red-500 hover:text-red-700 transition-colors"
                      data-product-id={producto.id}
                    >
                      <i class="fas fa-trash" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div class="cart-summary mt-8 bg-gray-50 p-6 rounded-lg">
          <div class="flex justify-between items-center mb-4">
            <span class="text-gray-600">Subtotal:</span>
            <span class="font-medium">${formatPrice(total)}</span>
          </div>
          <div class="flex justify-between items-center mb-4 pb-4 border-b border-gray-200">
            <span class="text-gray-600">Envío:</span>
            <span class="font-medium">Calculado en el siguiente paso</span>
          </div>
          <div class="flex justify-between items-center mb-6">
            <span class="text-lg font-semibold">Total:</span>
            <span class="text-xl font-bold text-primary-700" id="cart-total">
              ${formatPrice(total)}
            </span>
          </div>
          <div class="flex flex-col sm:flex-row gap-4">
            <button
              id="vaciar-carrito"
              class="btn-secondary flex-1 flex items-center justify-center"
            >
              <i class="fas fa-trash-alt mr-2" /> Vaciar carrito
            </button>
            <button
              id="finalizar-compra"
              class="btn-primary flex-1 flex items-center justify-center"
            >
              <i class="fas fa-check-circle mr-2" /> Finalizar compra
            </button>
          </div>
        </div>
      </div>
    )
  }
</div>

<script is:inline>
  // Centralized cart management functions
  const cartManager = {
    getCart: () => {
      if (typeof window !== 'undefined') {
        return JSON.parse(localStorage.getItem('carrito') || '[]');
      }
      return [];
    },
    updateCart: (cart) => {
      if (typeof window !== 'undefined') {
        localStorage.setItem('carrito', JSON.stringify(cart));
        if (window.location.pathname === '/carrito') {
          window.location.reload();
        }
        document.dispatchEvent(new CustomEvent('cartUpdated'));
      }
    },
  };

  // Manejadores de eventos para los botones de cantidad
  if (typeof document !== 'undefined') {
    document.querySelectorAll('.decrease-quantity').forEach((button) => {
      button.addEventListener('click', () => {
        const productId = button.getAttribute('data-product-id');
        const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
        if (input) {
          let value = parseInt(input.value);
          if (value > 1) {
            input.value = value - 1;
            updateQuantity(productId, value - 1);
          }
        }
      });
    });
  } // <-- This was missing

  document.querySelectorAll('.increase-quantity').forEach((button) => {
    button.addEventListener('click', () => {
      const productId = button.getAttribute('data-product-id');
      const input = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
      let value = parseInt(input.value);
      input.value = value + 1;
      updateQuantity(productId, value + 1);
    });
  });

  document.querySelectorAll('.quantity-input').forEach((input) => {
    input.addEventListener('change', () => {
      const productId = input.getAttribute('data-product-id');
      let value = parseInt(input.value);
      if (value < 1) {
        value = 1;
        input.value = 1;
      }
      updateQuantity(productId, value);
    });
  });

  // Función para actualizar la cantidad de un producto
  function updateQuantity(productId, quantity) {
    const cart = JSON.parse(localStorage.getItem('carrito') || '[]');
    const productIndex = cart.findIndex((item) => item.id === productId);

    if (productIndex !== -1) {
      cart[productIndex].quantity = quantity;
      updateCart(cart);

      // Actualizar subtotal en la interfaz
      const price = parseFloat(
        document
          .querySelector(`.quantity-input[data-product-id="${productId}"]`)
          .getAttribute('data-price')
      );
      const subtotalElement = document.querySelector(
        `tr[data-product-id="${productId}"] .subtotal`
      );
      if (subtotalElement) {
        subtotalElement.textContent = (price * quantity).toFixed(2);
      }

      // Actualizar total
      updateTotal();
    }
  }

  // Función para eliminar un producto del carrito
  document.querySelectorAll('.remove-item').forEach((button) => {
    button.addEventListener('click', () => {
      const productId = button.getAttribute('data-product-id');
      removeFromCart(productId);
    });
  });

  function removeFromCart(productId) {
    const cart = JSON.parse(localStorage.getItem('carrito') || '[]');
    const updatedCart = cart.filter((item) => item.id !== productId);
    updateCart(updatedCart);
  }

  // Función para actualizar el total
  function updateTotal() {
    const cart = JSON.parse(localStorage.getItem('carrito') || '[]');
    const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
    document.getElementById('cart-total').textContent = `$${total.toFixed(2)}`;
  }

  // Vaciar carrito
  document.getElementById('vaciar-carrito')?.addEventListener('click', () => {
    if (confirm('¿Estás seguro de que deseas vaciar el carrito?')) {
      localStorage.removeItem('carrito');
      window.location.reload();
    }
  });

  // Finalizar compra
  document.getElementById('finalizar-compra')?.addEventListener('click', () => {
    alert('¡Gracias por tu compra! En un sistema real, aquí continuarías al proceso de pago.');
    localStorage.removeItem('carrito');
    window.location.href = '/productos';
  });
</script>

<style>
  .quantity-input::-webkit-inner-spin-button,
  .quantity-input::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  .quantity-input {
    -moz-appearance: textfield;
  }
</style>
